// Немного о ⁡⁢⁣⁣HTTP⁡ и ⁡⁢⁣⁣HTTPS⁡ /
// Основное отличие между ⁡⁢⁣⁣HTTP⁡ и ⁡⁢⁣⁣HTTPS⁡ заключается в том, что HTTPS обеспечивает ⁡⁣⁣⁢шифрованную и защищенную передачу данных⁡, 
// тогда как HTTP передает данные ⁡⁢⁣⁢без шифрования⁡.

// Протокол ⁡⁢⁣⁣WebSocket⁡ («веб-сокет»), обеспечивает ⁡⁣⁣⁢возможность обмена данными⁡ между браузером и сервером через ⁡⁣⁣⁢постоянное соединение⁡. 
// Данные передаются по нему в ⁡⁣⁣⁢обоих направлениях⁡ в виде «⁡⁢⁣⁣пакетов⁡», без разрыва соединения и дополнительных HTTP-запросов.

// Итак, основное ⁡⁣⁣⁢отличие⁡ между ⁡⁢⁣⁣HTTP/HTTPS⁡ и ⁡⁢⁣⁣WebSocket⁡ заключается в том, что HTTP/HTTPS предназначены для 
// передачи данных с подходом "⁡⁣⁣⁢запрос-ответ⁡" и является ⁡⁢⁣⁣односторонней⁡ передачей, клиент отправляет запрос на сервер, сервер отправляет ответ.
// Каждый запрос создает новое соединение, которое после ответа закрывается
// тогда как ⁡⁢⁣⁣WebSocket⁡ обеспечивает ⁡⁣⁣⁢постоянное соединение⁡ для ⁡⁢⁣⁣двусторонней⁡ передачи данных. 

// Чтобы ⁡⁣⁣⁢открыть веб-сокет-соединение⁡, нам нужно создать объект ⁡⁢⁣⁣new WebSocket⁡⁣⁢⁣('ws://...')⁡⁡, указав в url-адресе специальный протокол ⁡⁢⁣⁣ws:⁡⁢⁣⁣//⁡⁡  .

// Также существует протокол ⁡⁢⁣⁣wss://⁡, использующий⁡⁣⁣⁢ шифрование⁡. Это как HTTPS для веб-сокетов.


// Как только объект WebSocket создан, мы должны слушать его ⁡⁢⁣⁣события⁡. Их всего ⁡⁣⁢⁣4⁡:

// ⁡⁢⁣⁣onopen⁡ – соединение установлено,
// ⁡⁢⁣⁣onmessage⁡ – получены данные,
// ⁡⁢⁣⁣onerror⁡ – ошибка,
// ⁡⁢⁣⁣onclose⁡ – соединение закрыто.
// …А если мы хотим отправить что-нибудь, то вызов ⁡⁢⁣⁣socket.send(data)⁡ сделает это.

const socket = new WebSocket('wss://javascript.info/article/websocket/demo/hello');
console.log(socket)

socket.onopen = (e) => {
  console.log('Связь с сервером установлена!')
  console.log('Отправляем данные на сервер.')
  socket.send('Меня зовут Максим')
}

socket.onmessage = (e) => {
  console.log(`Получаем данные с сервера: ${e.data}`)
}

socket.onclose = (e) => {
  if (e.wasClean) {
    console.log(`[close] Соединение закрыто чисто, код=${e.code} причина=${e.reason}`);
  } else {
    // например, сервер убил процесс или сеть недоступна
    // обычно в этом случае event.code 1006
    console.log('[close] Соединение прервано');
  }
}

socket.onerror = (err) => {
  console.log('Ошибка!', err)
}

// ​‌‍‌⁡⁢⁣⁣Важно понимать​⁡, что эти обработчики вызываются ⁡⁣⁣⁢автоматически⁡ при наступлении соответствующих событий. 
// Например, ⁡⁢⁣⁣socket.onopen⁡ вызовется только тогда, когда соединение ⁡⁣⁣⁢откроется⁡, и так далее.