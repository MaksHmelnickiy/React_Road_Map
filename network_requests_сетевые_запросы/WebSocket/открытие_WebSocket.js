// Когда new ⁡⁢⁣⁣WebSocket(url)⁡ создан, он ⁡⁣⁣⁢тут же сам начинает устанавливать соединение⁡.

// В браузере мы напрямую работаем ⁡⁣⁢⁣только⁡ с ⁡⁢⁣⁣текстовыми⁡ и ⁡⁢⁣⁣бинарными(img)⁡ фреймами.

// Запрос ⁡⁢⁣⁣WebSocket⁡ ⁡⁢⁣⁢нельзя⁡ эмулировать
// Мы ⁡⁢⁣⁢не можем использовать⁡ ⁡⁣⁣⁢XMLHttpRequest⁡ или ⁡⁣⁣⁢fetch⁡ для создания такого HTTP-запроса, потому что JavaScript не позволяет устанавливать такие заголовки.

const socket = new WebSocket('wss://javascript.info/article/websocket/chat/ws');

socket.onopen = () => {
  socket.send('Hello, WebSocket!');
};

socket.onmessage = (event) => {
  console.log('Received:', event);
};

// Могут быть дополнительные заголовки⁡⁡, описывающие ⁡⁣⁣⁢расширения (⁡⁢⁣⁣Sec-WebSocket-Extensions⁡⁣⁣⁢)⁡ и ⁡⁣⁣⁢подпротоколы⁡(⁡⁢⁣⁣Sec-WebSocket-Protocol)⁡.
// Однако, в большинстве случаев, это будет ⁡⁢⁣⁣определяться⁡ и настраиваться на ⁡⁢⁣⁣стороне сервера⁡.
// ⁡⁣⁣⁢Вот пример⁡, как можно ⁡⁢⁣⁣указать⁡ ⁡⁣⁣⁢подпротоколы⁡ и ⁡⁣⁣⁢расширения⁡ при создании WebSocket на ⁡⁢⁣⁣стороне клиента⁡ (JavaScript):
const socket2 = new WebSocket('ws://example.com', 'graphql', {
  extensions: 'x-webkit-deflate-frame'
});
// Здесь '⁡⁢⁣⁣graphql⁡' - это пример ⁡⁣⁣⁢подпротокола⁡, который вы хотите использовать, и '⁡⁢⁣⁣x-webkit-deflate-frame⁡' - это пример ⁡⁣⁣⁢расширения⁡ для сжатия данных.

// ⁡⁣⁣⁢Примеры реальных подпротоколов⁡:
// "⁡⁢⁣⁣chat⁡": Используется для простых чат-приложений в реальном времени.
// "⁡⁢⁣⁣json⁡": Обозначает, что обмен данными будет в формате JSON.
// "⁡⁢⁣⁣graphql⁡": Используется для выполнения запросов и мутаций на сервере GraphQL.
// "⁡⁢⁣⁣mqtt⁡": Протокол для обмена сообщениями с использованием публикации и подписки.

// ⁡⁣⁣⁢Примеры реальных расширений⁡:
// "⁡⁢⁣⁣permessage-deflate⁡": Расширение для сжатия данных с использованием алгоритма DEFLATE.
// "⁡⁢⁣⁣x-webkit-deflate-frame⁡": Расширение для сжатия данных в браузерах, поддерживающих WebKit (Safari, Chrome).
// "⁡⁢⁣⁣text-trim⁡": Расширение для удаления незначащих пробелов и переносов строк из текстовых сообщений.