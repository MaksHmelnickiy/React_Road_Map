// Основное применение метода ⁡⁢⁣⁣fetch⁡ встречается с выполнением ⁡⁣⁣⁢асинхронных HTTP-запросов⁡. 
// Этот метод предоставляет возможность ⁡⁣⁣⁢отправки HTTP-запросов⁡ к серверу и ⁡⁣⁣⁢получения ответов⁡. 
// Обычно он используется для ⁡⁢⁣⁣получения данных с сервера⁡, 
// ⁡⁣⁣⁢обновления информации⁡ ⁡⁢⁣⁢без⁡ ⁡⁢⁣⁣перезагрузки страницы⁡, а также для взаимодействия с API и другими сервисами.

// Метод ⁡⁢⁣⁣fetch⁡ ⁡⁣⁣⁢возвращает⁡ ⁡⁢⁣⁣Promise⁡, что позволяет использовать синтаксис цепочки ⁡⁢⁣⁣then⁡ для обработки ответа.
// пример

const fetchData = fetch('https://jsonplaceholder.typicode.com/posts', {
  method: 'GET' // По умолчанию стоит метод ⁡⁢⁣⁣GET⁡, и в данном случае его можно не указывать. Будето просто ⁡⁣⁣⁢fetch⁡⁣⁢⁣(⁡⁡⁢⁣⁣'https://...'⁡⁣⁢⁣)⁡;
})
  .then(resp => resp.json())
  .then(data => console.log(data))
  .catch(error => console.log('ee', error))

// Помимо ⁡⁢⁣⁣GET⁡, метод ⁡⁣⁣⁢fetch⁡ также позволяет выполнять другие HTTP-методы, такие как ⁡⁢⁣⁣POST⁡, ⁡⁢⁣⁣PUT⁡, ⁡⁢⁣⁣DELETE⁡ и ⁡⁣⁢⁣др⁡., 
// что делает его мощным инструментом для взаимодействия с веб-серверами и API.

// Метод ⁡⁢⁣⁣fetch()⁡ — ⁡⁣⁣⁢современный⁡ и очень мощный, поэтому начнём с него. 
// Он ⁡⁢⁣⁢не поддерживается⁡ ⁡⁢⁣⁣старыми браузерами⁡ (можно использовать полифил), ⁡⁣⁣⁢но поддерживается всеми ⁡⁢⁣⁣современными браузерами⁡⁡.