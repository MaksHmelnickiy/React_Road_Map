// Как мы знаем, метод ⁡⁢⁣⁣fetch ⁡возвращает промис. А в JavaScript в целом ⁡⁢⁣⁢нет понятия «отмены»⁡ ⁡⁢⁣⁢промиса⁡. Как же прервать запрос fetch?
// Для таких целей ⁡⁣⁣⁢существует⁡ специальный встроенный объект: ⁡⁢⁣⁣AbortController⁡, который можно ⁡⁣⁣⁢использовать для отмены⁡ не только fetch, 
// но и других асинхронных задач.

// Создаем экземпляр AbortController
const controller = new AbortController();

// Получаем ссылку на сигнал отмены из контроллера
const signal = controller.signal;

// Создаем объект опций для fetch
const options = {
  method: 'GET',
  signal: signal // Подключаем сигнал отмены к опциям запроса
};

// Выполняем fetch с использованием опций
fetch('https://jsonplaceholder.typicode.com/todos/1', options)
  .then(response => response.json())
  .then(data => {
    console.log('Данные с сервера:', data);
  })
  .catch(error => {
    if (error.name === 'AbortError') {
      console.log('Запрос был отменен.');
    } else {
      console.error('Ошибка:', error);
    }
  });

// Через некоторое время (например, 3 секунды) отменяем запрос
setTimeout(() => {
  controller.abort(); // Отменяем запрос с помощью контроллера
}, 3000);

// В данном примере:

// 1) Мы создаем экземпляр ⁡⁢⁣⁣AbortController⁡.

// 2) Получаем сигнал отмены из контроллера (⁡⁢⁣⁣controller.signal⁡).

// 3) Создаем ⁡⁢⁣⁣объект опций⁡ для fetch и подключаем сигнал отмены к опциям запроса.

// 4) Выполняем ⁡⁢⁣⁣fetch⁡ с использованием созданных опций.

// 5) Если запрос был отменен (например, с помощью ⁡⁢⁣⁣controller.abort()⁡), будет выброшено исключение ⁡⁢⁣⁣AbortError⁡. 
// Мы ловим это исключение и выводим сообщение о том, что запрос был отменен.

// 6) В данном случае, через ⁡⁣⁢⁣3 секунды⁡ мы вызываем ⁡⁢⁣⁣controller.abort() ⁡⁢⁢⁢и если⁡ ⁡⁢⁣⁢запрос не успевает выполнится⁡ мы увидим ошибку ⁡⁢⁣⁣AbortError⁡⁡, 
// чтобы отменить запрос.

// Таким образом, ⁡⁢⁣⁣AbortController⁡ позволяет ⁡⁣⁣⁢гибко управлять отменой асинхронных операций⁡, что может быть полезно, например, 
// для сокращения ненужных запросов или обработки ситуаций, когда пользователь прерывает действие.










