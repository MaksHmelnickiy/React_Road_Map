// ⁡⁢⁣⁣localStorage⁡: ⁡⁣⁣⁢Долгосрочное хранилище⁡ данных на стороне клиента. Данные сохраняются после закрытия браузера и перезапуска компьютера. 
// Доступны для всех вкладок и окон с одного домена.

// ⁡⁢⁣⁣sessionStorage⁡: ⁡⁣⁣⁢Краткосрочное хранилище⁡ данных на стороне клиента. Данные хранятся только в течение одной сессии браузера. 
// Доступны только в текущей вкладке или окне браузера.

// Объекты хранилища ⁡⁢⁣⁣localStorage⁡ и ⁡⁢⁣⁣sessionStorage⁡ предоставляют ⁡⁣⁣⁢одинаковые⁡ методы и свойства⁡:
// ⁡⁢⁣⁣setItem⁡⁣⁣⁢(key, value)⁡ – сохранить пару ключ/значение.
// ⁡⁢⁣⁣getItem⁡⁣⁣⁢(key)⁡ – получить данные по ключу key.
// ⁡⁢⁣⁣removeItem⁡⁣⁣⁢(key)⁡ – удалить данные с ключом key.
// ⁡⁢⁣⁣clear⁡⁣⁣⁢()⁡ – удалить всё.
// ⁡⁢⁣⁣key⁡⁣⁣⁢(index)⁡ – получить ключ на заданной позиции.
// ⁡⁢⁣⁣length⁡ – количество элементов в хранилище.

// ​‌‍‌⁡⁣⁣⁢Доступ как к обычному объекту​⁡ /
// ⁡⁢⁣⁣установить⁡ значение для ключа
localStorage.test = 2;
// ⁡⁢⁣⁣получить⁡ значение по ключу
console.log( localStorage.test ); // 2
// Это возможно по историческим причинам и, как правило, работает, но обычно ⁡⁢⁣⁢не рекомендуется⁡ записывать так как выше /

// ​‌‍‌⁡⁣⁣⁢Что бы перебрать все ключи массива мы можем сделать так⁡​/
const keys = Object.keys(localStorage);
console.log(keys)
for(let i of keys){
  console.log('Переборка в цикле:', localStorage.getItem(i))
};

// ​‌‍‌⁡⁣⁣⁢что бы присвоить данные объекта для localStorage⁡​ /
const obj = {
  name: 'Maks',
  surname: 'Hmel'
}
console.log(obj)
const storage = (obj) => {
  for(let i in obj){
    localStorage.setItem(i, obj[i])
  }
}
storage(obj)
console.log(localStorage)