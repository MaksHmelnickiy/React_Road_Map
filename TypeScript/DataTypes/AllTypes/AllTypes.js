"use strict";
// В ⁡⁢⁣⁣TypeScript⁡ имеются следующие ⁡⁣⁣⁢типы⁡:
// ⁡⁢⁣⁣boolean⁡: логическое значение true или false
var isDone = false;
// ⁡⁢⁣⁣number⁡: числовое значение
var decimal = 6;
// ⁡⁢⁣⁣string⁡: строки⁡
var color = "blue";
// ⁡⁢⁣⁣Array⁡: массивы
var list1 = [1, 2, 3]; // первый способ
var list2 = [1, 2, 3]; // второй способ
// ⁡⁢⁣⁣Any⁡: представляет тип, который может быть ⁡⁣⁣⁢абсолютно любым⁡. Это как "опция отключения типов" в TypeScript.. 
var looselyTyped = 4;
looselyTyped = "now it is a string";
// ⁡⁢⁣⁣Unknown⁡: представляет тип значения, который может быть "⁡⁣⁣⁢любым⁡". ⁡⁢⁢⁢Это немного безопаснее, чем использование типа any⁡.
var notSure = 4;
notSure = "maybe a string instead";
// ⁡⁢⁣⁣null⁡ и ⁡⁢⁣⁣undefined⁡: соответствуют значениям null и undefined в javascript
var u = undefined;
var n = null;
// ⁡⁢⁣⁣Never⁡: представляет тип значений, которые ⁡⁣⁣⁢никогда не происходят⁡. Например, функция, которая всегда выбрасывает ⁡⁢⁣⁢ошибку⁡, никогда ⁡⁢⁣⁢не возвращает значение⁡.
function errorNever(message) {
    throw new Error(message);
}
// ⁡⁢⁣⁣Void⁡: это отсутствие каких-либо типов. 
// Чаще всего он используется в качестве возвращаемого типа ⁡⁣⁣⁢функций⁡, ⁡⁣⁣⁢которые не возвращают никакого значения⁡.
function warnUser() {
    console.log("This is my warning message");
}
// ⁡⁢⁣⁣Enum⁡: используется для ⁡⁣⁣⁢объявления перечисления⁡ — отдельного типа, который состоит из набора именованных констант, 
// называемого списком перечислителей.
var Colors;
(function (Colors) {
    Colors["Red"] = "first";
    Colors["Green"] = "second";
    Colors["Blue"] = "third";
})(Colors || (Colors = {}));
var b = Colors.Green; // colors Green ⁡⁢⁣⁢нельзя перезаписать⁡ так как это ⁡⁢⁣⁣const⁡ /
// ⁡⁢⁣⁣Tuple⁡ (кортеж): представляет собой массив, ⁡⁣⁣⁢каждому⁡ из элементов которого можно ⁡⁣⁣⁢указать свой тип⁡. 
var x;
x = ["hello", 10];
// ​‌‌‍⁡⁣⁣⁢Отличие ⁡⁢⁣⁣Any⁡ от ⁡⁢⁣⁣Never⁡⁡​ /
var valueAny;
valueAny.foo.bar; // Нет ошибки
var valueUnknown;
// ⁡⁣⁢⁣valueUnknown.foo.bar⁡;  // ⁡⁢⁣⁢Ошибка⁡ /
// Это делает ⁡⁢⁣⁣unknown⁡ более безопасным для использования, ⁡⁢⁣⁣чем any⁡, поскольку он ⁡⁣⁣⁢сохраняет обязательную проверку типа⁡.
// ++++++++++++++++++​‌‍‌⁡⁣⁣​‌‌‍⁡⁣⁣⁢Структуры (типы)⁡​⁡​+++++++++++++++++
// Обычно в TypeScript ⁡⁢⁣⁣не разделяют понятия типа и структуры⁡, потому что ⁡⁣⁣⁢структура тоже является типом⁡. 
// Но так как ⁡⁢⁣⁣структура⁡ – это ⁡⁣⁣⁢составной тип данных⁡, ⁡⁢⁢⁢который состоит из разных типов⁡, 
// сгруппированных под одним, ⁡⁣⁣к ним относятся: ⁡⁢⁢⁡⁢⁣⁣Enum⁡⁡, ⁡⁢⁣⁣Array⁡, ⁡⁢⁣⁣Tuple⁡,
