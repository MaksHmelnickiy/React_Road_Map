"use strict";
// ​‌‍‌⁡⁣⁣⁢Тип функции⁡​
// Каждая ⁡⁢⁣⁣функция⁡ имеет ⁡⁣⁣⁢тип⁡, как и обычные переменные. Тип функции фактически представляет ⁡⁣⁣⁢комбинацию типов параметров⁡ и ⁡⁣⁣⁢типа возвращаемого значения⁡. 
// Например: 
var op;
//То есть ⁡⁣⁣⁢переменная⁡ ⁡⁢⁣⁣op⁡ представляет ⁡⁣⁣⁢любую функцию⁡, которая ⁡⁢⁣⁣принимает⁡ ⁡⁣⁣⁢два числа⁡ и которая ⁡⁢⁣⁣возвращает⁡ ⁡⁣⁣⁢число⁡.
var sum = function (x, y) { return x + y; };
op = sum;
console.log(op(2, 4)); // Работает как сложение = 6
// Здесь переменная ⁡⁢⁣⁣op⁡ указывает на функцию ⁡⁢⁣⁣sum⁡. И соответственно вызов ⁡⁣⁢⁣op(2, 4)⁡ фактически будет представлять вызов ⁡⁣⁢⁣sum(2, 4)⁡.
// ​‌‍‌⁡⁣⁣⁢Функции обратного вызова⁡​ .
// ⁡⁢⁣⁣Тип функции⁡ можно использовать как ⁡⁢⁣⁣тип переменной⁡, но он также может применяться для определения ⁡⁣⁣⁢типа параметра другой функции⁡⁡:
var mathOp = function (x, y, operation) {
    var result = operation(x, y);
    return result;
};
var operationFunc;
operationFunc = function (a, b) { return a + b; };
console.log(mathOp(10, 20, operationFunc)); // Сложение = 30
// Здесь в ⁡⁢⁣⁣функции mathOp⁡ третий парметр как раз представляет ⁡⁣⁣⁢функцию⁡, которая принимает ⁡⁣⁣⁢два параметра⁡ типа number и возвращает число. 
// Фактически тем самым мы можем передавать ⁡⁢⁣⁣функции обратного вызова⁡, например⁡, ⁡⁢⁣⁡⁣⁣⁢при генерации событий⁡⁡, когда в ответ на некоторое действие срабатывает другая функция.
