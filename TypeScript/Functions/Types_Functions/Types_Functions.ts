// ​‌‍‌⁡⁣⁣⁢Тип функции⁡​
// Каждая ⁡⁢⁣⁣функция⁡ имеет ⁡⁣⁣⁢тип⁡, как и обычные переменные. Тип функции фактически представляет ⁡⁣⁣⁢комбинацию типов параметров⁡ и ⁡⁣⁣⁢типа возвращаемого значения⁡. 
// Например: 

let op: (x: number, y: number) => number
//То есть ⁡⁣⁣⁢переменная⁡ ⁡⁢⁣⁣op⁡ представляет ⁡⁣⁣⁢любую функцию⁡, которая ⁡⁢⁣⁣принимает⁡ ⁡⁣⁣⁢два числа⁡ и которая ⁡⁢⁣⁣возвращает⁡ ⁡⁣⁣⁢число⁡.

let sum = (x: number, y: number): number => x + y

op = sum
console.log(op(2, 4)) // Работает как сложение = 6
// Здесь переменная ⁡⁢⁣⁣op⁡ указывает на функцию ⁡⁢⁣⁣sum⁡. И соответственно вызов ⁡⁣⁢⁣op(2, 4)⁡ фактически будет представлять вызов ⁡⁣⁢⁣sum(2, 4)⁡.


// ​‌‍‌⁡⁣⁣⁢Функции обратного вызова⁡​ .
// ⁡⁢⁣⁣Тип функции⁡ можно использовать как ⁡⁢⁣⁣тип переменной⁡, но он также может применяться для определения ⁡⁣⁣⁢типа параметра другой функции⁡⁡:
let mathOp = (x: number, y: number, operation: (a: number, b: number) => number): number => {
    let result = operation(x, y)
    return result
  }
  
let operationFunc: (x: number, y: number) => number
operationFunc = (a: number, b: number): number => a + b
console.log(mathOp(10, 20, operationFunc)) // Сложение = 30

// Здесь в ⁡⁢⁣⁣функции mathOp⁡ третий парметр как раз представляет ⁡⁣⁣⁢функцию⁡, которая принимает ⁡⁣⁣⁢два параметра⁡ типа number и возвращает число. 
// Фактически тем самым мы можем передавать ⁡⁢⁣⁣функции обратного вызова⁡, например⁡, ⁡⁢⁣⁡⁣⁣⁢при генерации событий⁡⁡, когда в ответ на некоторое действие срабатывает другая функция.

