// ⁡⁢⁣⁣T⁡ представляет ⁡⁣⁣⁢параметр типа⁡ (type parameter) или ⁡⁣⁣⁢типовую переменную⁡ (type variable) и используется для ⁡⁣⁣⁢обобщений⁡ (generics). /
// Он является ⁡⁣⁣⁡⁢⁣⁣placeholder'ом⁡⁡ (заполнителем) для конкретного ⁡⁣⁣⁢типа данных⁡, который будет указан при использовании ⁡⁣⁣⁢обобщенного компонента⁡, ⁡⁣⁣⁢функции⁡ или ⁡⁣⁣⁢класса⁡.

// ⁡⁢⁣⁣Обобщение (generics)⁡ - он позволяет создавать ⁡⁣⁣⁢обобщенные конструкции⁡, способные работать с различными типами данных. 
// Он позволяет ⁡⁣⁣⁢параметризовать типы⁡, используемые внутри конструкции, и ⁡⁣⁣⁢делает код более гибким и переиспользуемым⁡. 
// Обобщения используют параметры типа (например, ⁡⁢⁣⁣T⁡ (⁡⁢⁢⁢возможна любая другая буква⁡)) для ⁡⁣⁣⁢обозначения неизвестных типов данных⁡.

// const useGenericState = <T>(initialValue: T): [T, (value: T) => void] => { // здесь даем ⁡⁢⁣⁣generic тип ⁡⁣⁢⁣T⁡⁡/ 
//   // eslint-disable-next-line @typescript-eslint/no-unused-vars, prefer-destructuring, 
//     const [state, setState] = React.useState<T>(initialValue);

//     const updateState = (value: T) => {
//       setState(value);
//     };
  
//     return [state, updateState];
 
// }

// const [count, setCount] = useGenericState<number>(0); // а здесь уже подставляем ⁡⁢⁣⁣нужный нам ⁡⁣⁢⁣тип⁡⁡⁡.
