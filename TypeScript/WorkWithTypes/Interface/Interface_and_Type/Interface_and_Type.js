"use strict";
// ​‌‍‌⁡⁣⁣⁢Cравнение различий между ⁡⁢⁣⁣type⁡ ⁡⁣⁣⁢и⁡ ⁡⁢⁣⁣interface⁡⁡​ /
// ⁡⁢⁣⁣type⁡ позволяет создавать гибкие комбинации типов с помощью операторов объединения (⁡⁣⁣⁢|⁡) и пересечения (⁡⁣⁣⁢&⁡), в то время как ⁡⁢⁣⁣interface⁡ ⁡⁢⁣⁢не поддерживает⁡ такие операторы напрямую.
// ⁡⁢⁣⁣interface⁡ ⁡⁣⁣⁢поддерживает наследование⁡, позволяя создавать иерархию интерфейсов и ⁡⁣⁣⁢наследовать их свойства⁡, тогда как ⁡⁢⁣⁣type⁡ ⁡⁢⁣⁢не поддерживает наследование⁡.
// ⁡⁢⁣⁣interface⁡ может быть ⁡⁣⁣⁢расширен путем наследования⁡ от других интерфейсов, тогда как ⁡⁢⁣⁣type⁡ ⁡⁢⁣⁢не может быть расширен⁡ напрямую.
// ⁡⁢⁣⁣interface⁡ поддерживает ⁡⁣⁣⁢вычисляемые и составные свойства⁡, позволяющие определять свойства, значения которых ⁡⁣⁣⁢вычисляются или зависят⁡ от других свойств, 
// в то время как ⁡⁢⁣⁣type⁡ ⁡⁢⁣⁢не поддерживает⁡ эти возможности.
// ⁡⁢⁣⁣type⁡ может быть использован с оператором ⁡⁣⁢⁣typeof⁡, который позволяет ⁡⁣⁣⁢создавать новые типы⁡ на основе существующих значений.
// ​‌‍‌⁡⁣⁣⁢В общем⁡​, ⁡⁢⁣⁣type⁡ обладает ⁡⁣⁣⁢большей гибкостью⁡ и позволяет создавать более ⁡⁣⁣⁢сложные комбинации⁡ типов, в то время как ⁡⁢⁣⁣interface⁡ предлагает ⁡⁣⁣⁢простой синтаксис⁡ и возможность ⁡⁣⁣⁢наследования⁡. 
// ⁡⁣⁣⁢Пример с ⁡⁢⁣⁣typeOf⁡⁡ / 
var person = {
    name: "John",
    age: 25,
};
function greet(person) {
    console.log("Hello, ".concat(person.name, "! You are ").concat(person.age, " years old."));
}
greet(person); // Вывод: Hello, John! You are 25 years old.
