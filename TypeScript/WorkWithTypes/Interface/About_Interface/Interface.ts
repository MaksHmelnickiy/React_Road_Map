// ⁡⁢⁣⁣Interface⁡ в TypeScript представляет собой способ ⁡⁣⁣⁢определения формы объекта⁡. 
// Он ⁡⁣⁣⁢определяет структуру объекта⁡, ⁡⁣⁣⁢задавая типы для его свойств и методов⁡, 
// но не предоставляет реализацию для этих свойств и методов.

// ⁡⁢⁣⁣Interface⁡ TypeScript может использоваться для ⁡⁢⁣⁣проверки⁡ соответствия 
// объекта заданной структуре или для ⁡⁢⁣⁣определения⁡ типа для параметра функции. 
// Interface в TypeScript может также ⁡⁣⁣⁢наследоваться⁡ от другого интерфейса, расширяя его свойства и методы.

interface Person {
    firstName: string;
    lastName: string;
    age: number;
    greet: () => string;
}

function getPerson(person: Person){
    return person.greet + ' ' +  person.firstName + ' ' + person.lastName + ' ' + person.age;
} 

const max: Person = {
    firstName: "Max",
    lastName: "Hmel",
    age: 33,
    greet: function () {
        return 'Hello'
    }
}

console.log(getPerson(max)) // '⁡⁣⁢⁣Hello Max Hmel 33⁡'

// ⁡⁣⁣⁢​‌‍‌Последовательное описание всего кода​⁡.

// В этом примере ⁡⁣⁣⁢определен интерфейс⁡ ⁡⁢⁣⁣Person⁡, который ⁡⁣⁣⁢задает структуру⁡ для объектов, 
// которые должны иметь свойства ⁡⁣⁢⁣firstName⁡, ⁡⁣⁢⁣lastName⁡, ⁡⁣⁢⁣age⁡ и ⁡⁣⁢⁣метод greet⁡. 
// Затем ⁡⁣⁣⁢определена функция⁡⁡ ⁡⁢⁣⁣greetPerson⁡, которая ⁡⁣⁣⁢принимает⁡ ⁡⁣⁣⁢объект⁡ типа ⁡⁢⁣⁣Person⁡ в качестве параметра и возвращает строку.
// Далее ⁡⁣⁣⁢создается объект⁡ ⁡⁢⁣⁣max⁡, который ⁡⁣⁣⁢соответствует⁡ ⁡⁣⁣⁢структуре⁡ ⁡⁢⁣⁣Person⁡, 
// и ⁡⁣⁣⁢вызывается функция⁡ ⁡⁢⁣⁣greetPerson⁡ с этим объектом в качестве аргумента.

// ⁡⁣⁣⁢​‌‍‌для розширения​⁡ ⁡⁢⁣⁣interface⁡ используется ключевое слово ⁡⁢⁣⁣extends⁡, и этот интерфейс будет ⁡⁣⁣⁢наследовать все свойства предыдущего⁡ и возможность ⁡⁣⁣⁢добавить новые⁡.
// ⁡⁣⁣⁢Например⁡:
interface Person2 extends Person {
    email: string;
}

// ⁡⁣⁣⁢Необязательные свойства⁡ указываются через ⁡⁢⁣⁣?⁡ . ⁡⁣⁣⁢Например⁡ ⁡⁣⁢⁣color?: string⁡;

// ⁡⁣⁣⁢Свойства только для чтения⁡ указываются через ⁡⁢⁣⁣readonly .  Например  ⁡⁣⁢⁣readonly ⁡⁣⁢⁣size: number⁡⁡⁡;⁡