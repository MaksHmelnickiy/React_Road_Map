// Метод ⁡⁢⁣⁣event.preventDefault⁡ позволяет ⁡⁢⁣⁢отменить⁡ действия браузера по умолчанию. 
// Например, сделать так, чтобы при клике по ссылке перехода на другую страницу не было или по нажатию на кнопку форма не отправлялась на сервер.

// Javascript является однопоточным языком (в текущий момент времени может выполнятся только одна задача). 

// ⁡⁢⁣⁣Event Loop⁡ (цикл событий) - состоит из Call Stack (Стек вызовов), 
// ⁡⁢⁣⁣Web Apis⁡ (который регистрирует события и setTimeOut()) setTimeOut() - из нехо выходит по истичению таймера, а событие типа клик сохраняются.
// и ⁡⁢⁣⁣Callback Queue⁡ (Очередь задач которые ждут пока Call Stack не станет пустым) первыми выходят те которые первыми в эту очередь зашли.


setTimeout(() => console.log("timeout"), 0);

for(let i = 0; i < 5; i++){
  console.log(i)
}

new Promise(resolve => console.log('promise'))
.then(console.log('then'))

console.log("code");

// console.log("code") появляется первым, т.к. это обычный синхронный вызов.
// promise появляется вторым, потому что ⁡⁢⁣⁣.then⁡ ⁡⁣⁣⁢проходит через очередь микрозадач⁡ и выполняется после текущего синхронного кода.
// timeout появляется последним, потому что это макрозадача.

// ⁡⁢⁣⁣Микрозадачи⁡ приходят только из кода. Обычно они ⁡⁣⁣⁢создаются промисами⁡: выполнение обработчика 
// ⁡⁢⁣⁣.then/catch/finally⁡ ⁡⁣⁣⁢становится микрозадачей⁡. Микрозадачи также используются «под капотом» ⁡⁢⁣⁣await⁡, т.к. это форма обработки промиса.