// ⁡⁢⁣⁣Итерируемые объекты⁡ – это объекты, которые реализуют метод ⁡⁣⁣⁢Symbol.iterator⁡, как было описано выше.
// ⁡⁢⁣⁣Псевдомассивы⁡ – это объект, ⁡⁣⁣⁢структура которого совпадает со структурой массива ⁡
// (т.е. он хранит элементы в ⁡⁣⁢⁣индексах от 0 до length-1⁡), но при этом он не обладает методами, 
// свойственными полноценным массивам из-за отличий в прототипе.

let range = {
    from: 1,
    to: 5
  };

// ⁡⁢⁣⁢for(let item of range)⁡⁡⁣⁣⁢{⁡ .  
  //  ⁡⁣⁢⁣console.log(item)⁡ // ⁡⁢⁣⁢Error⁡ так как ⁡⁢⁣⁣range⁡ не итерируемый объект
// ⁡⁣⁣⁢}⁡ /
// Чтобы сделать ⁡⁣⁢⁣range⁡ итерируемым (и позволить ⁡⁣⁣⁢for..of⁡ работать с ним), 
// нам нужно добавить в объект метод с именем ⁡⁢⁣⁣Symbol.iterator⁡ (специальный встроенный ⁡⁢⁣⁣Symbol⁡, созданный как раз для этого).

// ⁡⁣⁢⁣1.⁡ Когда цикл ⁡⁢⁣⁣for..of⁡ запускается, он вызывает этот метод один раз (или выдаёт ошибку, если метод не найден). 
//    Этот метод должен ⁡⁣⁣⁢вернуть итератор – объект с методом ⁡⁢⁣⁣next⁡⁡.
// ⁡⁣⁢⁣2.⁡ Дальше ⁡⁢⁣⁣for..of⁡ работает только с этим возвращённым объектом.
// ⁡⁣⁢⁣3.⁡ Когда ⁡⁢⁣⁣for..of⁡ хочет получить следующее значение, он вызывает метод ⁡⁢⁣⁣next()⁡ этого объекта.
// ⁡⁣⁢⁣4.⁡ Результат вызова ⁡⁢⁣⁣next()⁡ должен иметь вид ⁡⁣⁣⁢{done: Boolean, value: any}⁡, где ⁡⁣⁣⁢done=true⁡ означает, 
//    что цикл завершён, в противном случае ⁡⁣⁣⁢value⁡ содержит очередное значение.[]


// ⁡⁣⁣⁢Вот полная реализация ⁡⁢⁣⁢range⁡ ⁡⁣⁣⁢с пояснениями:⁡ /
  // ⁡⁣⁢⁣1.⁡ вызов ⁡⁢⁣⁣for..of⁡ сначала вызывает эту функцию
  range[Symbol.iterator] = function() {
  
  // ...она возвращает объект итератора:
    // ⁡⁣⁢⁣2.⁡ Далее, ⁡⁢⁣⁣for..of⁡ работает только с этим итератором, запрашивая у него новые значения
    return {
      current: this.from,
      last: this.to,
  
      // ⁡⁣⁢⁣3.⁡⁡⁢⁣⁣ next()⁡ вызывается на каждой итерации цикла ⁡⁢⁣⁣for..of⁡ /
      next() {
        // ⁡⁣⁢⁣4.⁡ он должен ⁡⁢⁣⁣вернуть значение⁡ в виде объекта ⁡⁣⁣⁢{done:.., value :...}⁡ /
        if (this.current <= this.last) {
          return { done: false, value: this.current++ };
        } else {
          return { done: true };
        }
      }
    };
  }; 
  
  // теперь работает!
  for (let num of range) {
    console.log(num); // 1, затем 2, 3, 4, 5
  }

  // А вот объект, который является ⁡⁢⁣⁣п͟с͟е͟в͟д͟о͟м͟а͟с͟с͟и͟в͟о͟м⁡, но его ⁡⁢⁣⁢нельзя итерировать⁡:

  let arrayLike = { // есть ⁡⁢⁣⁣индексы⁡ и свойство ⁡⁣⁣⁢length => псевдомассив⁡
    0: "Hello",
    1: "World",
    length: 2
  };
  
  // ⁡⁢⁣⁢Ошибка⁡ (отсутствует ⁡⁢⁣⁣Symbol.iterator⁡)
  for (let item of arrayLike) {
    console.log(item)
  }