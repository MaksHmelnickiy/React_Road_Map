// Основные ⁡⁣⁣⁢отличия⁡ ⁡⁢⁣⁣var⁡ от ⁡⁢⁣⁣let⁡ и ⁡⁢⁣⁣const⁡ это то что ⁡⁢⁣⁣var⁡ не видит блочной области видимости например в ⁡⁣⁣⁢for(...)⁡, ⁡⁣⁣⁢if,else⁡ /
// Так как ⁡⁢⁣⁣var⁡ ⁡⁢⁣⁢игнорирует блоки⁡, мы получили ⁡⁢⁣⁣глобальную⁡ переменную test.
if (true) {
    var test = true; // А если будет ⁡⁢⁣⁣let⁡ или ⁡⁢⁣⁣const⁡ - то мы ⁡⁢⁣⁢не сможем⁡ ее вызвать за границами блока ⁡⁣⁣⁢if⁡/
}
console.log(test); // true, переменная существует вне блока if // А если будет ⁡⁢⁣⁣let⁡ или ⁡⁢⁣⁣const⁡ - будет ⁡⁢⁣⁢ошибка⁡/

if (true) {
    let test2 = true;
}
// ⁡⁣⁢⁣console.log(test2)⁡ // ⁡⁢⁣⁢Error⁡ /

// Если блок кода находится ⁡⁢⁣⁣внутри функции⁡, то var становится ⁡⁣⁣⁢локальной⁡ переменной в этой функции:
function sayHi() {
    if (true) {
      var phrase = "Привет";
    }
  
    console.log(phrase); // срабатывает и выводит "Привет"
}
sayHi();
console.log(phrase); // ⁡⁢⁣⁢Error⁡ - а здесь уже ⁡⁢⁣⁣var⁡ выведет ошибку так как он лежит в функции /

// ​‌‍‌«⁡⁢⁣⁣var⁡»⁡⁣⁣⁢ допускает повторное объявление⁡​ /
var user = "Pete";
var user; // ничего не делает, переменная объявлена раньше, в то время как ⁡⁢⁣⁣let⁡ вызовет ⁡⁢⁣⁢ошибку⁡ /
// ...нет ошибки
console.log(user); // Pete
