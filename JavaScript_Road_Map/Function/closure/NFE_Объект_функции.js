// ​‌‍‌⁡⁢⁣⁣Функции – это объекты⁡​.

// ⁡⁣⁣⁢Их свойства⁡:
// ⁡⁢⁣⁣name⁡ – имя функции. Обычно берётся из объявления функции, но если там нет – JavaScript пытается понять его из контекста.
// ⁡⁢⁣⁣length⁡ – количество аргументов в объявлении функции. Троеточие («остаточные параметры») не считается.

// ⁡⁢⁣⁣Named Function Expression⁡ или ⁡⁢⁣⁣NFE⁡ – это термин для Function Expression, у которого есть имя.
//⁡⁣⁣⁢ Например⁡ /

let sayHi = function func(who) { // ⁡⁢⁣⁣NFE⁡ - есть имя функции ⁡⁢⁣⁣func⁡ /
    if (who) {
      console.log(`Hello, ${who}`);
    } else {
      func("Guest"); // использует ⁡⁢⁣⁣func⁡, чтобы снова ⁡⁣⁣⁢вызвать себя же⁡ /
    }
};
  
  sayHi(); // Hello, Guest /
  // А вот так - ⁡⁢⁣⁢не cработает⁡:
  // ⁡⁣⁢⁣func()⁡; // ⁡⁢⁣⁢Ошибка⁡, ⁡⁢⁣⁣func⁡ не определена (недоступна вне функции)

// Есть ⁡⁣⁣⁢две важные особенности⁡ имени func, ради которого оно даётся:
// ⁡⁣⁢⁣1.⁡ Оно позволяет функции ссылаться ⁡⁣⁣⁢на себя же⁡.
// ⁡⁣⁢⁣2.⁡ Оно не доступно ⁡⁣⁣⁢за пределами функции⁡.

// ⁡⁣⁣⁢Почему⁡ мы используем ⁡⁢⁣⁣func⁡? Почему просто не использовать ⁡⁢⁣⁣sayHi⁡ для вложенного вызова? - ⁡⁢⁣⁣Функция ⁡
// может быть ⁡⁣⁣⁢присвоена другой переменной⁡, и тогда код начнёт выдавать ⁡⁢⁣⁢ошибки⁡:
// Например:
let welcome = sayHi;
sayHi = null;
welcome(); // ⁡⁢⁣⁢Ошибка⁡, вложенный вызов sayHi больше не работает!