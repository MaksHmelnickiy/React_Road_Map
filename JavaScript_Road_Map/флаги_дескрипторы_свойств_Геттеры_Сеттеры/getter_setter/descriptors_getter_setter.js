// ⁡⁢⁣⁣Дескрипторы свойств-аксессоров⁡ ⁡⁣⁣⁢отличаются⁡ от «обычных» свойств-данных.

// ⁡⁢⁣⁣Свойства-аксессоры⁡ ⁡⁢⁣⁢не имеют⁡ ⁡⁣⁣⁢value⁡ и ⁡⁣⁣⁢writable⁡, но взамен предлагают ⁡⁢⁣⁣функции⁡ ⁡⁣⁣⁢get⁡ и ⁡⁣⁣⁢set⁡.

// То есть, дескриптор аксессора может иметь:

// ⁡⁢⁣⁣get⁡ – функция без аргументов, которая сработает при ⁡⁣⁣⁢чтении⁡ свойства,
// ⁡⁢⁣⁣set⁡ – функция, принимающая ⁡⁣⁣⁢один аргумент⁡, вызываемая при ⁡⁣⁣⁢присвоении⁡ свойства,
// ⁡⁢⁣⁣enumerable⁡ – то же самое, что и для свойств-данных, - Определяет, будет ли свойство перечисляемым в циклах (true или false).
// ⁡⁢⁣⁣configurable⁡ – то же самое, что и для свойств-данных. - Определяет, может ли быть изменен тип свойства и его флаги (true или false).

const user = {
  name: 'Maks',
  surname: 'Hmel'
}

// Что бы ⁡⁣⁣⁢установить⁡ к ⁡⁣⁣⁢существующему⁡ объекту ⁡⁢⁣⁣get⁡ или ⁡⁢⁣⁣set⁡ используется метод ⁡⁢⁣⁣Object.defineProperty()⁡ или⁡⁢⁣⁣ Object.defineProperties()⁡ /
// Еще пример когда у нас ⁡⁢⁣⁣установлен set⁡ мы можем задать ему ⁡⁣⁣⁢правила⁡ чтобы присваивать ⁡⁣⁣⁢новые значения типа⁡ ⁡⁣⁢⁣minLength > 3⁡, 
// делаем что то вроде ⁡⁣⁣⁢маски⁡ /

Object.defineProperty(user, 'fullName', {
  get() {
    return `${this.name} ${this.surname}`
  },
  set() {
    return [this.name, this.surname] = value.join(' ')
  }
})

console.log(user.fullName)