// ⁡⁢⁣⁣Деструктурирующее присваивание⁡ – это специальный синтаксис, который позволяет нам «⁡⁣⁣⁢распаковать ⁡⁣⁣⁢и скопировать⁡⁡» 
// ⁡⁢⁣⁢массивы⁡⁡, ⁡⁢⁣⁢функции⁡ или ⁡⁢⁣⁢объекты⁡ в несколько переменных, так как иногда они более удобны.

// ​‌‍‌⁡⁣⁣⁢Деструктуризация массива⁡ пример:​ /

// у нас есть массив с именем и фамилией
let arr = ["Ilya", "Kantor"];
// деструктурирующее присваивание
// записывает firstName = arr[0]
// и surname = arr[1]
let [firstName, surname] = arr;
arr[0]="sss"
console.log(firstName); // Ilya
console.log(surname);  // Kantor

// Аналогичным способом можно разбить строку методом ⁡⁢⁣⁣split⁡ или другими методам /
let [firstName2, surname2] = "Ilya Kantor".split(' ');
console.log(firstName2); // Ilya
console.log(surname2);  // Kantor

// «⁡⁢⁣⁣Деструктурирующее присваивание⁡» не уничтожает массив. Оно вообще ничего не делает 
// с правой частью присваивания, его задача – только ⁡⁣⁣⁢скопировать⁡ нужные значения в переменные.

// ⁡⁣⁣⁢Это просто короткий вариант записи⁡:
// let [firstName, surname] = arr;
let firstName3 = arr[0];
let surname3 = arr[1];

// Работает с любым ⁡⁢⁣⁣перебираемым объектом⁡ с правой стороны
// …На самом деле мы можем использовать любой перебираемый объект, не только массивы:
let [a, b, c] = "abc";
let [one, two, three] = new Set([1, 2, 3]);

// Также можно использовать для остальных элементов массива ​‌‍‌⁡⁢⁣⁣оператор расширения ...arr⁡​.
let arrFull=['maks', 'faks', 'taks', 'jaks']
let [var1,var2, ...arrSpread] = arrFull; // в ⁡⁢⁣⁣...arrSpread⁡ кладем остальные элементы ⁡⁣⁢⁣'taks' 'jaks'⁡ /
console.log('var1', arrSpread) // (2) ['taks', 'jaks'] /