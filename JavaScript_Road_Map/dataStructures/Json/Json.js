// ⁡⁢⁣⁣JSON⁡ (⁡⁢⁢⁢JavaScript Object Notation⁡) – это общий формат для представления ⁡⁣⁣⁢значений и объектов⁡. 
// ⁡⁢⁣⁣JSON⁡ легко использовать для обмена данными, когда клиент использует JavaScript, 
// а ⁡⁢⁣⁣сервер⁡ написан на ⁡⁣⁣⁢Ruby/PHP/Java⁡ или любом другом языке.

// ​‌‍‌⁡⁣⁣⁢Методы Json⁡​:
// ⁡⁢⁣⁣JSON.stringify⁡ для преобразования ⁡⁣⁣⁢объектов в JSON⁡.
// ⁡⁢⁣⁣JSON.parse⁡ для преобразования ⁡⁣⁣⁢JSON обратно в объект⁡.

let student = {
    name: 'John',
    age: 30,
    isAdmin: false,
    courses: ['html', 'css', 'js'],
    wife: null
  };
let json = JSON.stringify(student) // Преобразовывает в строку /
console.log(typeof json) // ⁡⁢⁣⁢string⁡ /
console.log(json)        // {⁡⁣⁢⁣"name":"John","age":30,"isAdmin":false,"courses":["html","css","js"],"wife":null⁡} /

// ⁡⁢⁣⁢Обратите внимание⁡, что объект в формате ⁡⁢⁣⁣JSON⁡ имеет несколько важных отличий от объектного литерала:
//⁡⁣⁢⁡⁣⁢⁣1.⁡Строки используют ⁡⁢⁣⁣двойные кавычки⁡. Никаких одинарных кавычек или обратных кавычек в JSON. Так ⁡⁣⁣⁢'John' становится "John"⁡.
//⁡⁣⁢⁣2.⁡Имена свойств объекта также заключаются в ⁡⁢⁣⁣двойные кавычки⁡. Это обязательно. Так ⁡⁣⁣⁢age:30 становится "age":30⁡.

// ⁡⁢⁣⁣JSON.stringify⁡ может быть применён и к ⁡⁣⁣⁢примитивам⁡.

// ​‌‍‌⁡⁣⁣⁢JSON поддерживает следующие типы данных⁡​:
// ⁡⁢⁣⁣Объекты ⁡{ ... } /
// ⁡⁢⁣⁣Массивы⁡ [ ... ] /
// Примитивы:
//    ⁡⁢⁣⁣строки⁡, /
//    ⁡⁢⁣⁣числа⁡, /
//    логические значения ⁡⁢⁣⁣true/false⁡, /
//    ⁡⁢⁣⁣null⁡. /


// ​‌‍‌⁡⁣⁣⁢Полный синтаксис JSON.stringify⁡​:
// ⁡⁣⁢⁢let⁡ ⁡⁣⁢⁣json⁡ = ⁡⁢⁣⁢JSON.stringify(value, [⁡⁣⁢⁣replacer⁡⁢⁣⁢,⁡ ⁡⁣⁢⁣space⁡⁢⁣⁢])⁡⁡⁡;

// ⁡⁢⁣⁣value⁡ - Значение для кодирования.
// ⁡⁢⁣⁣replacer⁡ - Массив свойств для кодирования или функция соответствия ⁡⁣⁣⁢function(key, value)⁡.
// ⁡⁢⁣⁣space⁡ - Дополнительное пространство (отступы), используемое для ⁡⁣⁣⁢форматирования⁡.

console.log(JSON.stringify(student, ["name","age"], 2)) // Выводит ниже только ⁡⁢⁣⁣name, age⁡. С отступом в ⁡⁢⁣⁣два проблема⁡ /
// ⁡⁣⁣⁢Result⁡:
// {
//   "name": "John",  
//   "age": 30
// } 


// ​‌‍‌Чтобы ⁡⁢⁣⁣декодировать JSON-строку⁡, нам нужен другой метод с именем ⁡⁢⁣⁣JSON.parse​⁡.
// ​‌‍‌⁡⁣⁣⁢Синтаксис⁡​:
// ⁡⁣⁢⁢let⁡ ⁡⁣⁢⁣value⁡ = ⁡⁢⁣⁢JSON.parse(⁡⁣⁢⁣str⁡⁢⁣⁢, [⁡⁡⁣⁢⁣reviver⁡⁢⁣⁢])⁡⁡⁡;

// ⁡⁢⁣⁣str⁡ - JSON для преобразования в объект.
// ⁡⁢⁣⁣reviver⁡ - Необязательная ⁡⁣⁣⁢функция⁡, которая будет вызываться для каждой пары ⁡⁣⁣⁢(ключ, значение) ⁡
// и может преобразовывать значение.