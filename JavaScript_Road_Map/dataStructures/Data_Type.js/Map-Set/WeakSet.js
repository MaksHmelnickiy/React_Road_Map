// Коллекция WeakSet ведёт себя похоже:

// Она аналогична ⁡⁢⁣⁣Set⁡, но мы можем добавлять в⁡⁢⁣⁣ WeakSet⁡ ⁡⁣⁣⁢только объекты⁡ (не примитивные значения).
// Объект присутствует в множестве только до тех пор, ⁡⁣⁢⁣пока доступен где-то ещё⁡.
// Как и ⁡⁢⁣⁣Set⁡, она поддерживает ​‌‍‌⁡⁣⁣⁢методы:⁡​ ⁡⁢⁣⁣add(), has() и delete⁡⁢⁣⁣()⁡⁡, но не size, keys() и не является перебираемой.

let visitedSet = new WeakSet();

let john = { name: "John" };
let pete = { name: "Pete" };
let mary = { name: "Mary" };

visitedSet.add(john); // John заходил к нам
visitedSet.add(pete); // потом Pete
visitedSet.add(john); // John снова

// visitedSet сейчас содержит двух пользователей

// проверим, заходил ли John?
alert(visitedSet.has(john)); // true

// проверим, заходила ли Mary?
alert(visitedSet.has(mary)); // false

john = null;

// структура данных visitedSet будет очищена автоматически

// ⁡⁢⁣​‌‍‌⁡⁢⁣⁣WeakMap⁡​⁡ и ​‌‍‌⁡⁢⁣⁣WeakSet⁡​ используются как вспомогательные структуры данных ⁡⁣⁣⁢в дополнение к «основному» месту хранения объекта⁡. 
// Если объект ⁡⁣⁢⁣удаляется из основного хранилища⁡ ⁡⁣⁢⁣и нигде не используется⁡, кроме как в качестве ⁡⁢⁣⁣ключа⁡ в WeakMap или в WeakSet, 
// то он будет ⁡⁣⁣⁢удалён автоматически⁡.