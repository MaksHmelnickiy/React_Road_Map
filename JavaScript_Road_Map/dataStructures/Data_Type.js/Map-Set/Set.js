// Объект ⁡⁢⁣⁣Set⁡ – это особый вид коллекции: «множество» значений (без ключей), где каждое значение может появляться только один раз.

// ⁡⁣⁣⁢Его основные методы это:⁡

// ⁡⁢⁣⁣new Set(iterable)⁡ – создаёт Set, и если в качестве аргумента был предоставлен итерируемый объект (обычно это массив), то копирует его значения в новый Set.
// ⁡⁢⁣⁣set.add(value)⁡ – добавляет значение (если оно уже есть, то ничего не делает), возвращает тот же объект set.
// ⁡⁢⁣⁣set.delete(value)⁡ – удаляет значение, возвращает true, если value было в множестве на момент вызова, иначе false.
// ⁡⁢⁣⁣set.has(value)⁡ – возвращает true, если значение присутствует в множестве, иначе false.
// ⁡⁢⁣⁣set.clear()⁡ – удаляет все имеющиеся значения.
// ⁡⁢⁣⁣set.size⁡ – возвращает количество элементов в множестве.

let set = new Set();

let john = { name: "John" };
let pete = { name: "Pete" };
let mary = { name: "Mary" };
let obg = {
    name: 'maks',
    set: 'test',
    bul: 'res'
}
console.log(obg)
// считаем гостей, некоторые приходят несколько раз
set.add(john);
set.add(pete);
set.add(mary);
set.add(john);
set.add(mary);

// ⁡⁣⁣⁢set⁡ хранит только 3 уникальных значения
console.log(set.size); // 3

for (let user of set) {
    console.log(user.name); // John (потом Pete и Mary)
}

// Основная «изюминка» – это то, что при повторных вызовах ⁡⁢⁣⁣set.add()⁡ ⁡⁢⁣⁢с одним и тем же значением ничего не происходит⁡, 
// за счёт этого как раз и получается, что каждое значение появляется один раз.

