// ⁡⁣⁣​‌‍‌⁡⁣⁣⁢Цепочка промисов⁡​⁡ .

// ⁡⁣⁣⁢Поток выполнения такой⁡:

// 1. ⁡⁢⁣⁣Начальный промис⁡ успешно выполняется через 1 секунду (*),
// 2. Затем вызывается обработчик в ⁡⁢⁣⁣.then (**)⁡.
// 3. ⁡⁣⁣⁢Возвращаемое им значение⁡ передаётся дальше в следующий обработчик ⁡⁢⁣⁣.then (***)⁡⁡
// 4. …и так далее.

new Promise(function(resolve, reject){
    setTimeout(() => resolve(1), 1000)
})
.then(function(result){
    console.log(result + 2)
    return result + 2
}) // 3
.then(function(result){
    console.log(result + 2)
    return result + 2 // ⁡⁣⁢⁣5⁡ / в цепочке ⁡⁣⁣⁢сохраняется⁡ ⁡⁢⁣⁣result⁡ от предыдущих промисов .
})  
.then(function(result){
    console.log(result + 2)
    return result + 2 // ⁡⁣⁢⁣7⁡ / в цепочке ⁡⁣⁣⁢сохраняется⁡ ⁡⁢⁣⁣result⁡ от предыдущих промисов .
})  



// Если обработчик в ⁡⁢⁣⁣.then⁡ (или в catch/finally, без разницы) возвращает промис, 
// последующие элементы цепочки ждут, пока этот промис выполнится. 
// Когда это происходит, результат его выполнения (или ⁡⁢⁣⁢ошибка⁡) ⁡⁣⁣⁢передаётся дальше⁡.