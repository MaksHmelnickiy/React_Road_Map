//*************** ⁡⁢⁣⁣Then⁡ ************ */
let promise = new Promise(function(resolve, reject) {
    setTimeout(() => resolve("done!"), 1000);
  });
  
  // ⁡⁢⁣⁣resolve⁡ запустит первую функцию, переданную в ⁡⁣⁢⁣.then⁡ /
  promise.then(
    result => console.log(result), // выведет "done!" через одну секунду
    error => console.log(error) // не будет запущена
  );

//   Первый аргумент метода ⁡⁢⁣⁣.then⁡ – функция, которая выполняется, когда промис переходит 
// в состояние «⁡⁣⁣⁢выполнен успешно⁡», и получает результат.

//   Второй аргумент ⁡⁢⁣⁣.then⁡ – функция, которая выполняется, когда промис переходит 
// в состояние «⁡⁢⁣⁢выполнен с ошибкой⁡», и получает ошибку.

//*******⁡⁢⁣⁣Catch⁡ ********* */
//   Если мы хотели бы только обработать ⁡⁢⁣⁢ошибку⁡, то можно использовать ⁡⁢⁣⁣null⁡ в качестве первого аргумента: 
// ⁡⁢⁣⁣.then(null, errorHandlingFunction)⁡. 
//   Или можно воспользоваться методом ⁡⁢⁣⁣.catch(errorHandlingFunction)⁡, который сделает то же самое:

// *********** ⁡⁢⁣⁣Finally⁡ ********** / 
// Вызов ⁡⁢⁣⁣.finally(f)⁡ похож на ⁡⁢⁣⁣.then(f, f)⁡, в том смысле, что f выполнится в любом случае, когда промис завершится: 
// ⁡⁣⁣⁢успешно⁡ или ⁡⁢⁣⁢с⁡ ⁡⁢⁣⁢ошибкой⁡.
// Обработчик, вызываемый из ⁡⁢⁣⁣finally⁡, ⁡⁣⁣⁢не имеет аргументов⁡. 

// Обработчик ⁡⁢⁣⁣finally⁡ «пропускает» результат или ошибку дальше, к последующим обработчикам.
// Например, здесь результат проходит через ⁡⁣⁣⁢finally⁡ к ⁡⁣⁣⁢then⁡:
new Promise((resolve, reject) => {
  setTimeout(() => resolve("value"), 2000);
})
  .finally(() => console.log("Промис завершён")) // срабатывает первым
  .then(result => console.log(result)); // <-- .then показывает "value"


 // ​‌‍‌⁡⁣⁣⁢Наглядный пример последовательности выполнения промис⁡​а /
// Каким будет вывод этого фрагмента кода его последовательность ?

console.log('start');

const promise1 = new Promise((resolve, reject) => {
  console.log(1)
})

promise1.then(res => {
  console.log(2)
})

console.log('end');

// В этом коде метод ⁡⁢⁣⁣resolve⁡ ⁡⁢⁣⁢никогда не вызывался⁡, поэтому ⁡⁣⁢⁣promise1⁡ всегда находится в состоянии ожидания (⁡⁣⁣⁢pending⁡).
// Так что ⁡⁣⁢⁣promise1.then(…)⁡ ⁡⁢⁣⁢никогда не выполнялся.⁡ 2 не выводится в консоли.

// ⁡⁣⁣⁢Результат⁡: start , 1 , end . /