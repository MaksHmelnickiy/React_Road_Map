export {};
// ​‌‍‌⁡⁢⁣⁣Компоненты:⁡​ React основан на компонентах, которые являются ⁡⁣⁣⁢независимыми, переиспользуемыми⁡ и ⁡⁣⁣⁢изолированными блоками кода⁡. 
// Компоненты позволяют ⁡⁣⁣⁢разбивать⁡ пользовательский интерфейс на ⁡⁣⁣⁢маленькие части⁡, что делает код более ⁡⁣⁢⁣модульным⁡ и ⁡⁣⁢⁣удобным⁡ для поддержки.

// ​‌‍‌⁡⁢⁣⁣JSX: JSX⁡​ - это расширение ⁡⁣⁣⁢синтаксиса⁡ JavaScript, которое позволяет вам писать HTML-подобный код прямо в JavaScript. 

// ​‌‍‌⁡⁢⁣⁣Виртуальный DOM⁡​: React использует виртуальный DOM для ⁡⁣⁣⁢эффективного обновления ⁡⁢⁢⁢пользовательского интерфейса⁡⁡.
// Вместо прямого манипулирования реальным DOM, React создает ⁡⁣⁣⁢виртуальное представление⁡ ⁡⁢⁢⁢пользовательского интерфейса⁡ 
// и ⁡⁣⁣⁢сравнивает⁡ его с реальным DOM для определения ⁡⁣⁣⁢минимальных изменений⁡, которые требуется внести.

// ⁡⁢⁣​‌‍‌⁡⁢⁣⁣Свойства (props)​⁡⁡: используются для ⁡⁣⁣⁢передачи данных⁡ от ⁡⁣⁢⁣родительских⁡ компонентов ⁡⁣⁢⁣к дочерним⁡ компонентам. 
// Свойства являются доступными только для чтения и служат для настройки поведения компонента.

// ⁡⁢⁣⁣​‌‍‌Состояние (state)​⁡: представляет ⁡⁣⁣⁢изменяемые данные⁡, связанные с компонентом. 
// Он используется для ⁡⁣⁣⁢хранения информации⁡, которая может ⁡⁣⁣⁢изменяться в процессе⁡⁡ работы приложения. 
// Изменение состояния вызывает ⁡⁣⁣⁢перерисовку компонента⁡.

// ⁡⁢⁣⁣​‌‍‌Жизненный цикл компонента⁡⁡​: Компоненты в React имеют различные методы жизненного цикла, которые позволяют
// вам выполнять действия на разных этапах жизни компонента, таких как ⁡⁣⁣⁢монтирование⁡, ⁡⁣⁣⁢обновление⁡ и ⁡⁣⁣⁢размонтирование⁡.
// ⁡⁢⁣⁣Жизненный цикл компонента⁡ ⁡⁣⁣⁢используется⁡ в основном для ⁡⁢⁣⁣классовых компонентов⁡, но с выходом реакта версии ⁡⁣⁢⁣16.8⁡
// с появлением ⁡⁢⁣⁣хуков (hooks)⁡, функциональные компоненты также получили возможность ⁡⁣⁣⁢имитировать 
// некоторые аспекты жизненного цикла⁡ классовых компонентов. Хуки, такие как⁡⁢⁣⁣ useEffect⁡, 
// позволяют выполнять действия ⁡⁣⁣⁢на разных этапах жизненного цикла⁡ функционального компонента

// ​‌‍‌⁡⁢⁣⁣Обработчики событий⁡​: В React вы можете добавлять обработчики событий ⁡⁣⁣⁢к элементам⁡ пользовательского интерфейса. 
// Это позволяет реагировать на действия пользователя, такие как ⁡⁣⁢⁣щелчок мыши⁡ или ⁡⁣⁢⁣отправка формы⁡.

// ​‌‍‌⁡⁢⁣⁣Условный рендеринг⁡​: React позволяет вам условно отображать компоненты или части компонентов на основе определенных условий. 
// Это полезно для создания динамического пользовательского интерфейса.

// ​‌‍‌⁡⁢⁣⁣Ключи (keys)⁡​: При рендеринге списков компонентов в React, рекомендуется использовать ключи (keys).
// Ключи помогают React эффективно ⁡⁣⁣⁢обновлять⁡ только измененные элементы списка⁡, а ⁡⁢⁣⁢не⁡ ⁡⁣⁣⁢перерисовывать⁡⁡ весь список.