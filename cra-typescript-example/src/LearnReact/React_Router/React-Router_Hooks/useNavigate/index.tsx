// Хук ⁡⁢⁣⁣useNavigate⁡ позволяет программно ⁡⁣⁣⁢навигироваться⁡ между маршрутами вашего приложения.
// С помощью ⁡⁢⁣⁣useNavigate⁡ вы можете получить ⁡⁣⁣⁢функцию для навигации⁡ и использовать ее для ⁡⁣⁣⁢перехода⁡ ⁡⁢⁣⁣на другие страницы или маршруты⁡. 
// Это особенно полезно, когда вам нужно перейти на другую страницу ⁡⁣⁣⁢после определенных событий⁡ или в ответ на пользовательские действия.
// В прошлых версиях ⁡⁢⁣⁢вместо⁡ ⁡⁢⁣⁣useNavigate⁡ ⁡⁣⁣⁢использовался⁡ ⁡⁢⁣⁣useHistory⁡ /

import { RelativeRoutingType, useNavigate } from "react-router-dom";

// Функция⁡⁢⁣⁣ useNavigate⁡ которую он возвращает, принимает ⁡⁣⁣⁢следующие параметры⁡: ⁡⁢⁣⁣useNavigate⁡⁣⁣⁢(⁡⁣⁢⁣to⁡⁣⁣⁢:⁡ ⁡⁢⁢⁢string⁡ ⁡⁣⁣⁢|⁡ ⁡⁢⁢⁢number⁡, ⁡⁣⁢⁣options⁡⁡⁣⁣⁢?:⁡ ⁡⁢⁢⁢NavigateOptions⁡⁡⁣⁣⁢) ⁡/

// ⁡⁢⁣⁣to⁡ (обязательный): Это строка, которая представляет собой ⁡⁣⁣⁢путь к маршруту⁡, на который вы хотите перейти. 
// Этот путь может быть как ⁡⁣⁣⁢относительным⁡, так и ⁡⁣⁣⁢абсолютным⁡. А если ⁡⁣⁣⁡⁢⁣⁣принимая число⁡⁡ например ⁡⁣⁢⁣-1⁡ это как ⁡⁣⁣⁢кликнуть стрелочку назад⁡ или ⁡⁣⁣⁢кнопку Back⁡.
// Оно как бы ⁡⁢⁣⁣возвращает по истории⁡ на предыдущую страницу шаг назад соответственно ⁡⁣⁢⁣1⁡ ⁡⁣⁣⁢будет шаг вперед⁡ и т.д.

//⁡⁢⁣⁣ NavigateOptions⁡ состоит из ⁡⁣⁣⁢следующих свойств⁡: этот интерфейс мы можем увидеть 

export interface NavigateOptionsTest {
  replace?: boolean; // (⁡⁣⁣⁢boolean⁡): Если true, то текущая ⁡⁣⁣⁢запись в истории⁡ браузера будет ⁡⁢⁣⁢заменена⁡ ⁡⁣⁣⁢новой записью⁡, а ⁡⁢⁣⁢не⁡ ⁡⁣⁣⁢добавлена⁡. 
                     // Это ⁡⁢⁢⁢полезно⁡, например, при реализации перехода "⁡⁢⁣⁣назад⁡", 
                     // чтобы заменить текущий маршрут новым, не добавляя дублированных записей в историю.
  state?: any;
  preventScrollReset?: boolean;
  relative?: RelativeRoutingType;
}