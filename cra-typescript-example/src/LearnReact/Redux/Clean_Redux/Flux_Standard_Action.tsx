export {};
// ⁡⁢⁣⁣Flux Standard Action⁡ (⁡⁢⁣⁣FSA⁡) — это спецификация для действий в ⁡⁣⁣⁢архитектуре Flux⁡, которая определяет ⁡⁣⁣⁢определённый форма⁡т для создания действий.
// ⁡⁢⁣⁣Action⁡ в этом контексте — это ⁡⁣⁣⁢простой объект⁡, который описывает, ⁡⁣⁣⁢что произошло⁡, и ⁡⁣⁣⁢передаёт⁡ данные в хранилище (⁡⁢⁣⁣store⁡).

// ⁡⁢⁣⁣FSA⁡ говорит, что все действия (⁡⁣⁣⁢action⁡) должны иметь ⁡⁢⁣⁣одинаковую структуру⁡. Это помогает разработчикам понимать и работать с⁡⁣⁣⁢ actions⁡ легче, 
// потому что все они выглядят одинаково.

// ​‌‍​‌‍‌⁡⁣⁣⁢Основные принципы⁡​ ⁡⁢⁣⁣Flux Standard Action⁡​ /

// ⁡⁢⁣⁣Тип (type)⁡:
// Каждое действие должно иметь свойство ⁡⁢⁣⁣type⁡, которое является строкой и ⁡⁣⁣⁢описывает тип действия⁡. Это свойство ⁡⁢⁣⁢обязательно⁡.

// ⁡⁢⁣⁣Поле (payload)⁡:
// ⁡⁣⁣⁢Дополнительные данные⁡, необходимые для действия, передаются через свойство ⁡⁢⁣⁣payload⁡. 
// Это может быть любое значение (⁡⁢⁢⁢объект, массив, строка, число и т.д.⁡).

// ⁡⁢⁣⁣Ошибка (error)⁡:
// Опциональное свойство ⁡⁢⁣⁣error⁡⁡ должно быть ⁡⁣⁣⁢булевым значением⁡. Если ⁡⁣⁢⁣true⁡, действие описывает ошибку.

// ⁡⁢⁣⁣Метаданные (meta)⁡:
// ⁡⁢⁣⁣Action⁡ может иметь ⁡⁣⁣⁢дополнительную информацию⁡ в свойстве ⁡⁢⁣⁣meta⁡, которая полезна, но не обязательна для основного действия.


// ​‌‍‌⁡⁣⁣⁢‍Пример action⁡​​ по ⁡⁢⁣⁣FSA⁡ в ⁡⁢⁣⁣Redux⁡ /
const ADD_TODO = 'ADD_TODO';
function addTodo(text: any) {
  return {
    type: ADD_TODO,
    payload: {
      text: text
    }
  };
}

// Если вы хотите ⁡⁣⁣⁢создать ⁡⁢⁣⁣action⁡⁡, которое ⁡⁣⁣⁢описывает ⁡⁢⁣⁢ошибку⁡⁡, это может выглядеть так:
const ADD_TODO_ERROR = 'ADD_TODO_ERROR';
function addTodoError(errorMessage: any) {
  return {
    type: ADD_TODO_ERROR,
    payload: new Error(errorMessage),
    error: true
  };
}


// ⁡⁣⁣⁢​‌‍‌ЗАКЛюЧЕНИЕ:​⁡ /
// Использование ⁡⁢⁣⁣Flux Standard Action⁡ помогает сделать ваши ⁡⁣⁣⁡⁢⁣⁣actions⁡ ⁡⁣⁣⁢предсказуемыми⁡ и ⁡⁣⁣⁢совместимыми⁡⁡ с различными ⁡⁣⁣⁢инструментами⁡ и ⁡⁣⁣⁢библиотеками⁡,
// что упрощает разработку и поддержку вашего кода.