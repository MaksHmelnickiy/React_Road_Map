// ⁡⁢⁣⁣Создание собственных хуков⁡ в React позволяет абстрагировать и переиспользовать логику компонентов.

import React from "react";

// Вот ⁡⁣⁣⁢пример шагов⁡ для ⁡⁣⁣⁢создания⁡ своего собственного ⁡⁢⁣⁣хука⁡:

// ⁡⁢⁣⁣Создайте функцию-хук⁡: Определите функцию, которая будет вашим хуком. 
// Эта функция должна начинаться с префикса ⁡⁣⁣⁢use⁡ и может принимать аргументы, если это необходимо.

// ⁡⁢⁣⁣Определите состояние и логику⁡: Внутри функции-хука, вы можете определить состояние и логику. 
// Состояние может быть управляемым с помощью хуков ⁡⁣⁣⁢useState⁡, ⁡⁣⁣⁢useReducer⁡, или ⁡⁣⁣⁢других хуков⁡, в зависимости от вашей потребности. 
// Логика может быть всем, что вам нужно для вашего хука, например, обработка событий, выполнение сетевых запросов и так далее.

// ⁡⁢⁣⁣Верните значения⁡: В конце функции-хука ⁡⁣⁣⁢верните значения⁡, которые будут доступны при использовании хука в компоненте. 
// Обычно это включает в себя ⁡⁣⁣⁢переменные состояния и/или функции⁡ для управления состоянием.

// ⁡⁢⁣⁣Используйте хук в компонентах⁡: В ваших компонентах вы можете использовать ваш собственный хук, ⁡⁣⁣⁢вызывая его как функцию⁡. 
// Полученные значения можно использовать в компоненте так же, как и значения, возвращаемые встроенными хуками.


// ​‌‍‌⁡⁣⁣⁢Пример⁡​ создания простого хука для управления состоянием счетчика:

export const useMyHook = (initialValue = 0) => {
  const [count, setCount] = React.useState(initialValue);

  const increment = () => {
    setCount(prev => prev + 1)
  }

  const decrement = () => {
    setCount(prev => prev -1)
  }
  return {count, increment, decrement}
}