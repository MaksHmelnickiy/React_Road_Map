// ⁡⁢⁣⁣useMemo⁡ Этот хук позволяет вам сохранить "⁡⁢⁣⁣expensive⁡ (⁡⁣⁣⁢дорогие⁡)" ⁡⁣⁣⁢вычисления между рендерами⁡ компонента. 
// Это означает, что если ваши вычисления занимают ⁡⁣⁣⁢много времени⁡ или требуют ⁡⁣⁣⁢много ресурсов⁡, 
// вы можете использовать ⁡⁢⁣⁣useMemo⁡, чтобы эти вычисления выполнялись только тогда, ⁡⁣⁣⁢когда изменяются входные данные⁡.

// ⁡⁢⁣⁣Основная цель useMemo⁡ — ⁡⁣⁣⁢оптимизация производительности⁡, 
// поэтому его следует использовать осторожно и только тогда, когда это действительно необходимо

import React from "react";

const data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; // Это могут быть данные, которые часто изменяются

const expensiveComputation = (data: number[]) => {
    // Представьте, что это очень "⁡⁢⁣⁣expensive⁡ (⁡⁣⁣⁢дорогие⁡) - как синоним можно использовать ⁡⁢⁣⁣ресурсоемкий⁡" функция
    return data.reduce((a: number, b: number) => a + b, 0);
};

export const MyUseMemo = () => {
  const total = React.useMemo(() => expensiveComputation(data), [data]);

  return (
      <div>
        <br />
          {total}
      </div>
  );
};

// В этом примере, если ⁡⁢⁣⁣data⁡ ⁡⁣⁣⁢изменяется⁡, функция ⁡⁣⁢⁣expensiveComputation⁡ будет ⁡⁣⁣⁢вызываться снова⁡. Если ⁡⁢⁣⁣data⁡ ⁡⁣⁣⁢остается неизменной⁡, 
// будет ⁡⁢⁣⁣использоваться сохраненное значение⁡. Это может помочь предотвратить ненужные вычисления и улучшить производительность компонента.