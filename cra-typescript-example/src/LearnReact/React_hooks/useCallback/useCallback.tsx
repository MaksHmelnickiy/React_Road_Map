// ⁡⁢⁣⁣useCallback⁡ - это инструмент в библиотеке React для создания "⁡⁣⁣⁢запоминающихся⁡" функций. 
// Это значит, что ⁡⁣⁣⁢при каждом рендере⁡ компонента, функция, созданная с помощью useCallback, ⁡⁢⁣⁢не будет⁡ ⁡⁢⁣⁣создаваться заново⁡⁡, ⁡⁣⁣⁢если её зависимости не изменились⁡.

import React from "react";

// ⁡⁢⁣⁣Если функция очень простая⁡ и быстрая, то, возможно, использование ⁡⁣⁣⁢useCallback⁡ ⁡⁢⁣⁣будет лишним⁡ и даже может ⁡⁢⁣⁣замедлить⁡ работу приложения.
export const MyUseCallBack = () => {
  const [state, setState] = React.useState(0)

  const incrementCount = () => { 
    setState(state + 1);
    // ⁡⁢⁣⁣useCallback⁡ используется для обеспечения ⁡⁣⁣⁢стабильности ссылки⁡ на функцию incrementCount. 
    // Это значит, что ⁡⁣⁣⁢incrementCount⁡ будет пересоздана только тогда, когда ⁡⁣⁣⁢изменится значение ⁡⁢⁣⁣state⁡, что указано в массиве зависимостей.
  } // ⁡⁢⁣⁣массив⁡ ⁡⁢⁣⁣Зависимости⁡, если ⁡⁣⁣⁢изменилась⁡ функция создасться заново. 
  
  return <><h1>Count: {state}</h1> <button onClick={incrementCount}>Click</button></>
}

// Хотя ⁡⁣⁣⁢в данном примере⁡ использование⁡⁢⁣⁣ useCallback⁡ ⁡⁣⁣⁢не приносит большой выгоды⁡ (потому что ⁡⁢⁣⁢нет⁡ ⁡⁣⁣⁢дочерних компонентов или эффектов сайд-эффектов, зависящих от этой функции⁡), 
// оно демонстрирует основную концепцию работы этого хука. В более сложных сценариях, где функции передаются в дочерние компоненты или используются в других хуках, 
// useCallback может быть очень полезен для оптимизации производительности.